# 문제: 정수X가 주어질때 연산을 통해 1이 되도록 하는 최소 연산 횟수?
#       1. 5로 나누어 떨어지면 5로 나눈다.
#       2. 3으로 나누어 떨어지면 3으로 나눈다.
#       3. 2로 나누어 떨어지면 2로 나눈다.
#       4. 1을 뺀다.
# 해결방법: 특정 숫자의 1이 되는 최소 연산횟수는 그보다 큰숫자가 연산을 통해 그값이 됐을떄도 그대로 연산횟수를 유지한다.
#           또한 큰수를 연산하는 과정에서 작은수가 나오게 되므로 다이나믹 프로그래밍 조건 충족한다.
#           보텀업을 통해 dp테이블에 저장된 연산횟수(1을 빼거나,5,3,2를 나눈것중 가장 적은 연산횟수)를 이용하여 최종 값을 구한다.
n = int(input())
d = [0]*30001 # dp테이블: 최소 연산 횟수를 저장할것임
for i in range(2,n+1):
    d[i] = d[i-1]+1
    if i % 5 == 0:
        d[i] = min(d[i],d[i//5]+1) #d[i]는 이미 d[i-1]+1 됐음, 1뺀거랑 5나눈거중에 더 최소연산인것 고르려고
    if i % 3 == 0:
        d[i] = min(d[i],d[i//3]+1)
    if i % 2 == 0:
        d[i] = min(d[i],d[i//2]+1)
print(d[n])
    


   